AWSTemplateFormatVersion: 2010-09-09
Description: Create a Bucket in linked accounts, which will be used to provide data to QuickSight

Parameters: 
  LambdaIAMRoleParameter: 
    Type: String
    Description: Enter the ARN of the Role assigned to the CE Alternative Lambda

Resources:
  QuicksightBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", ["quicksight-data", Ref: "AWS::AccountId"]]
      Tags: 
        - Key: "Name"
          Value: !Join ["-", ["quicksight-data", Ref: "AWS::AccountId"]]
        - Key: "owner"
          Value: "T-Systems"
        - Key: "application"
          Value: "CostExplorerAlternative"
        - Key: "environment"
          Value: "prod"
        - Key: "criticality"
          Value: "low"
        - Key: "DPC"
          Value: "internal"                                        
  QuicksightBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref QuicksightBucket
      PolicyDocument: 
        Statement: 
          - Action:
              - "s3:Delete*"
              - "s3:List*"
              - "s3:Get*"
              - "s3:Put*"                        
            Effect: Allow
            Resource:
              - !Sub '${QuicksightBucket.Arn}'
              - !Sub '${QuicksightBucket.Arn}/*'
            Principal: 
              AWS: !Ref LambdaIAMRoleParameter
  CleanupBucketOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: !GetAtt TSIemptyBucketOnDeleteFunction.Arn  
      StackName: !Ref 'AWS::StackName'
      BucketName: !Ref QuicksightBucket              
  TSIemptyBucketOnDeleteFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: 
          !Sub |
            import json, boto3, logging
            import cfnresponse
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            def lambda_handler(event, context):
                logger.info("event: {}".format(event))
                try:
                    bucket = event['ResourceProperties']['BucketName']
                    logger.info("bucket: {}, event['RequestType']: {}".format(bucket,event['RequestType']))
                    if event['RequestType'] == 'Delete':
                        s3 = boto3.resource('s3')
                        bucket = s3.Bucket(bucket)
                        for obj in bucket.objects.filter():
                            logger.info("delete obj: {}".format(obj))
                            s3.Object(bucket.name, obj.key).delete()

                    sendResponseCfn(event, context, cfnresponse.SUCCESS)
                except Exception as e:
                    logger.info("Exception: {}".format(e))
                    sendResponseCfn(event, context, cfnresponse.FAILED)

            def sendResponseCfn(event, context, responseStatus):
                responseData = {}
                responseData['Data'] = {}
                cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")            

      Handler: "index.lambda_handler"
      Runtime: python3.7
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt TSIemptyBucketOnDeleteFunctionRole.Arn          
  TSIemptyBucketOnDeleteFunctionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"                
              - Effect: "Allow"
                Action: 
                  - "s3:List*"
                Resource: !Sub '${QuicksightBucket.Arn}' 
              - Effect: "Allow"
                Action: 
                  - "s3:Delete*"
                  - "s3:List*"
                  - "s3:Get*"                  
                Resource: !Sub '${QuicksightBucket.Arn}/*'          